/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as BrandsIndexRouteImport } from './routes/brands/index'
import { Route as ProductsProductIdRouteImport } from './routes/products/$productId'
import { Route as BrandsBrandIdRouteImport } from './routes/brands/$brandId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandsIndexRoute = BrandsIndexRouteImport.update({
  id: '/brands/',
  path: '/brands/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductIdRoute = ProductsProductIdRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandsBrandIdRoute = BrandsBrandIdRouteImport.update({
  id: '/brands/$brandId',
  path: '/brands/$brandId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/brands/$brandId': typeof BrandsBrandIdRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/brands': typeof BrandsIndexRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/brands/$brandId': typeof BrandsBrandIdRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/brands': typeof BrandsIndexRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/brands/$brandId': typeof BrandsBrandIdRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/brands/': typeof BrandsIndexRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/brands/$brandId'
    | '/products/$productId'
    | '/brands'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/brands/$brandId'
    | '/products/$productId'
    | '/brands'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/brands/$brandId'
    | '/products/$productId'
    | '/brands/'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BrandsBrandIdRoute: typeof BrandsBrandIdRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  BrandsIndexRoute: typeof BrandsIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brands/': {
      id: '/brands/'
      path: '/brands'
      fullPath: '/brands'
      preLoaderRoute: typeof BrandsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brands/$brandId': {
      id: '/brands/$brandId'
      path: '/brands/$brandId'
      fullPath: '/brands/$brandId'
      preLoaderRoute: typeof BrandsBrandIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BrandsBrandIdRoute: BrandsBrandIdRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  BrandsIndexRoute: BrandsIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
